// Code generated by go_code.py; DO NOT EDIT.

package graphics
import "fmt"
import "encoding/json"

func (self GRT_a) String() string {
switch self {
default: return "t"
case GRT_action_transmit_and_display: return "T"
case GRT_action_query: return "q"
case GRT_action_display: return "p"
case GRT_action_delete: return "d"
case GRT_action_frame: return "f"
case GRT_action_animate: return "a"
case GRT_action_compose: return "c"
}}
func (self GRT_a) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_a_from_string(x string) (ans GRT_a, err error) {
switch x {
case "t": return GRT_action_transmit, nil
case "T": return GRT_action_transmit_and_display, nil
case "q": return GRT_action_query, nil
case "p": return GRT_action_display, nil
case "d": return GRT_action_delete, nil
case "f": return GRT_action_frame, nil
case "a": return GRT_action_animate, nil
case "c": return GRT_action_compose, nil
}
err = fmt.Errorf("unknown value for enum GRT_a: %#v", x)
return
}
func (self *GRT_a) SetString(x string) error {
s, err := GRT_a_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_a) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_q) String() string {
switch self {
default: return "0"
case GRT_quiet_only_errors: return "1"
case GRT_quiet_silent: return "2"
}}
func (self GRT_q) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_q_from_string(x string) (ans GRT_q, err error) {
switch x {
case "0": return GRT_quiet_noisy, nil
case "1": return GRT_quiet_only_errors, nil
case "2": return GRT_quiet_silent, nil
}
err = fmt.Errorf("unknown value for enum GRT_q: %#v", x)
return
}
func (self *GRT_q) SetString(x string) error {
s, err := GRT_q_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_q) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_f) String() string {
switch self {
default: return "32"
case GRT_format_rgb: return "24"
case GRT_format_png: return "100"
}}
func (self GRT_f) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_f_from_string(x string) (ans GRT_f, err error) {
switch x {
case "32": return GRT_format_rgba, nil
case "24": return GRT_format_rgb, nil
case "100": return GRT_format_png, nil
}
err = fmt.Errorf("unknown value for enum GRT_f: %#v", x)
return
}
func (self *GRT_f) SetString(x string) error {
s, err := GRT_f_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_f) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_t) String() string {
switch self {
default: return "d"
case GRT_transmission_file: return "f"
case GRT_transmission_tempfile: return "t"
case GRT_transmission_sharedmem: return "s"
}}
func (self GRT_t) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_t_from_string(x string) (ans GRT_t, err error) {
switch x {
case "d": return GRT_transmission_direct, nil
case "f": return GRT_transmission_file, nil
case "t": return GRT_transmission_tempfile, nil
case "s": return GRT_transmission_sharedmem, nil
}
err = fmt.Errorf("unknown value for enum GRT_t: %#v", x)
return
}
func (self *GRT_t) SetString(x string) error {
s, err := GRT_t_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_t) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_o) String() string {
switch self {
default: return ""
case GRT_compression_zlib: return "z"
}}
func (self GRT_o) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_o_from_string(x string) (ans GRT_o, err error) {
switch x {
case "": return GRT_compression_none, nil
case "z": return GRT_compression_zlib, nil
}
err = fmt.Errorf("unknown value for enum GRT_o: %#v", x)
return
}
func (self *GRT_o) SetString(x string) error {
s, err := GRT_o_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_o) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_m) String() string {
switch self {
default: return "0"
case GRT_more_more: return "1"
}}
func (self GRT_m) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_m_from_string(x string) (ans GRT_m, err error) {
switch x {
case "0": return GRT_more_nomore, nil
case "1": return GRT_more_more, nil
}
err = fmt.Errorf("unknown value for enum GRT_m: %#v", x)
return
}
func (self *GRT_m) SetString(x string) error {
s, err := GRT_m_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_m) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_C) String() string {
switch self {
default: return "0"
case GRT_cursor_static: return "1"
}}
func (self GRT_C) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_C_from_string(x string) (ans GRT_C, err error) {
switch x {
case "0": return GRT_cursor_move, nil
case "1": return GRT_cursor_static, nil
}
err = fmt.Errorf("unknown value for enum GRT_C: %#v", x)
return
}
func (self *GRT_C) SetString(x string) error {
s, err := GRT_C_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_C) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_U) String() string {
switch self {
default: return "0"
case GRT_create_unicode_placeholder: return "1"
}}
func (self GRT_U) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_U_from_string(x string) (ans GRT_U, err error) {
switch x {
case "0": return GRT_no_unicode_placeholder, nil
case "1": return GRT_create_unicode_placeholder, nil
}
err = fmt.Errorf("unknown value for enum GRT_U: %#v", x)
return
}
func (self *GRT_U) SetString(x string) error {
s, err := GRT_U_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_U) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self CompositionMode) String() string {
switch self {
default: return "0"
case Overwrite: return "1"
}}
func (self CompositionMode) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func CompositionMode_from_string(x string) (ans CompositionMode, err error) {
switch x {
case "0": return AlphaBlend, nil
case "1": return Overwrite, nil
}
err = fmt.Errorf("unknown value for enum CompositionMode: %#v", x)
return
}
func (self *CompositionMode) SetString(x string) error {
s, err := CompositionMode_from_string(x); if err == nil { *self = s }; return err}
func (self *CompositionMode) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self GRT_d) String() string {
switch self {
default: return "a"
case GRT_free_visible: return "A"
case GRT_delete_by_id: return "i"
case GRT_free_by_id: return "I"
case GRT_delete_by_number: return "n"
case GRT_free_by_number: return "N"
case GRT_delete_by_cursor: return "c"
case GRT_free_by_cursor: return "C"
case GRT_delete_by_frame: return "f"
case GRT_free_by_frame: return "F"
case GRT_delete_by_cell: return "p"
case GRT_free_by_cell: return "P"
case GRT_delete_by_cell_zindex: return "q"
case GRT_free_by_cell_zindex: return "Q"
case GRT_delete_by_range: return "r"
case GRT_free_by_range: return "R"
case GRT_delete_by_column: return "x"
case GRT_free_by_column: return "X"
case GRT_delete_by_row: return "y"
case GRT_free_by_row: return "Y"
case GRT_delete_by_zindex: return "z"
case GRT_free_by_zindex: return "Z"
}}
func (self GRT_d) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func GRT_d_from_string(x string) (ans GRT_d, err error) {
switch x {
case "a": return GRT_delete_visible, nil
case "A": return GRT_free_visible, nil
case "i": return GRT_delete_by_id, nil
case "I": return GRT_free_by_id, nil
case "n": return GRT_delete_by_number, nil
case "N": return GRT_free_by_number, nil
case "c": return GRT_delete_by_cursor, nil
case "C": return GRT_free_by_cursor, nil
case "f": return GRT_delete_by_frame, nil
case "F": return GRT_free_by_frame, nil
case "p": return GRT_delete_by_cell, nil
case "P": return GRT_free_by_cell, nil
case "q": return GRT_delete_by_cell_zindex, nil
case "Q": return GRT_free_by_cell_zindex, nil
case "r": return GRT_delete_by_range, nil
case "R": return GRT_free_by_range, nil
case "x": return GRT_delete_by_column, nil
case "X": return GRT_free_by_column, nil
case "y": return GRT_delete_by_row, nil
case "Y": return GRT_free_by_row, nil
case "z": return GRT_delete_by_zindex, nil
case "Z": return GRT_free_by_zindex, nil
}
err = fmt.Errorf("unknown value for enum GRT_d: %#v", x)
return
}
func (self *GRT_d) SetString(x string) error {
s, err := GRT_d_from_string(x); if err == nil { *self = s }; return err}
func (self *GRT_d) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
